<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="$(ProjectDir)bin\Debug\Newtonsoft.Json.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>

<#@ output extension=".cs" #>
<#
//########################################################################
//#### Settings ##########################################################
//########################################################################


var appSettingSectionArray = "AppSettings";		// A list of json setting sections you whish to create classes for
var settingsFile = "appSettings.json";						// in case you have a custom setting json file name.
var createObjectInterface = true;							// The use of a custom interface, or set to false if useing IOptions<T>

//########################################################################


var path = Path.GetDirectoryName(this.Host.TemplateFile);
var settingsFilePath = Path.Combine(path, settingsFile);


#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool, T4ConfigDnx.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
<#

using (StreamReader file = File.OpenText(Path.Combine(path, settingsFilePath)))
{
	string json = file.ReadToEnd();
	//var settingsData = JsonConvert.DeserializeObject<Dictionary<string, object>>(json);
	var settingsData = JObject.Parse(json);

	var settings =
		from p in settingsData[appSettingSectionArray]
		select p;

	foreach (var item in settingsData)
	{
	#>
		
	<#
	}

}

#>


<#+


	public Dictionary<string, string> GetAppSettings()
	{
		//TODO: This is where we need to decide where we get the settings from; Array of Settings sections, defaulting to AppSettings

		return new Dictionary<string, string>();
	}

	public Dictionary<string, string> GetConnectionStrings()
	{
		return new Dictionary<string, string>();
	}

	public string GetTypeString(object value)
	{
		Guid guid;
		if( Guid.TryParse(value.ToString(), out guid))
		{
			return "Guid";
		}

		decimal d;
		if(decimal.TryParse(value.ToString(), out d))
		{
			return "decimal";
		}

		int i;
		if(int.TryParse(value.ToString(), out i))
		{
			return "int";
		}

		bool b;
		if (bool.TryParse(value.ToString(), out b))
		{
			return "bool";
		}

		return "string";
	}
#>