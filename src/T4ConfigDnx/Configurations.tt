<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="$(ProjectDir)bin\Debug\Newtonsoft.Json.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>

<#@ output extension=".cs" #>
<#
//########################################################################
//#### Settings ##########################################################
//########################################################################


var appSettingSectionArray = "AppSettings";		// A list of json setting sections you whish to create classes for
var settingsFile = "appSettings.json";						// in case you have a custom setting json file name.
var createObjectInterface = true;							// The use of a custom interface, or set to false if useing IOptions<T>

//########################################################################


var path = Path.GetDirectoryName(this.Host.TemplateFile);
var settingsFilePath = Path.Combine(path, settingsFile);
var namespaceName = System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NamespaceHint");


#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool, T4ConfigDnx.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
<#

using (StreamReader file = File.OpenText(Path.Combine(path, settingsFilePath)))
{
	
	string json = file.ReadToEnd();
	var array = (JObject)JsonConvert.DeserializeObject(json);
	var list = array[appSettingSectionArray].ToList();

	// interface builder
	#>
namespace <#= namespaceName #>
{
	using System;

	<#= "public interface I" + appSettingSectionArray + " {" #>
<#
	foreach (var item in list)
	{
#>
		<#= GetInterfacePropertyString(((JProperty)item).Name, ((JProperty)item).Value.ToString()) #>
<#
	}
#>
	} // close interface

	public class <#=appSettingSectionArray#> : I<#=appSettingSectionArray#> {
<#
	 // class builder
    
    foreach (var item in list)
    {
	#>
    <#= GetClassPrivatePropertyString(((JProperty)item).Name, ((JProperty)item).Value.ToString()) #>
    <#= GetClassPublicPropertyString(((JProperty)item).Name, ((JProperty)item).Value.ToString()) #>

    <#
	}
	#>
    
	<#=GetSettingMethod()#>
	
    } // close class
	<#
} 

#>
} // close ns

<#+


		private string GetInterfacePropertyString(string key, string value)
        {
            var type = GetTypeString(value);
            return string.Format(@"{0} {1} {{ get; }}", type, key);
        }

        private string GetClassPrivatePropertyString(string key, string value)
        {

            var type = GetTypeString(value);
            return string.Format("private static readonly Lazy<{0}> _{1} = new Lazy<{0}>(() => {2});", type, LowerFirst(key), GetConversion(type, key));
        }

        private string GetClassPublicPropertyString(string key, string value)
        {
            var type = GetTypeString(value);
            return string.Format("public virtual {0} {1} =>  _{2}.Value;",type, key, LowerFirst(key));
        }

        private static string GetConversion(string type, string key)
        {
            switch (type)
            {
                case "Guid":
                    return string.Format(@"new Guid(GetSetting(""{0}""))", key);
                case "int":
                    return string.Format(@"Convert.ToInt32(GetSetting(""{0}""))", key);
                case "bool":
                    return string.Format(@"Convert.ToBoolean(GetSetting(""{0}""))", key);
                case "decimal":
                    return string.Format(@"Convert.ToDecimal(GetSetting(""{0}""))", key);
                default:
                    return string.Format(@"GetSetting(""{0}"")", key);
            }
        }

        public string GetSettingMethod()
        {
            return "public static string GetSetting(string key) {{ return key; }}";
        }

        private  string GetTypeString(object value)
        {
            Guid guid;
            if (Guid.TryParse(value.ToString(), out guid))
            {
                return "Guid";
            }

            int i;
            if (int.TryParse(value.ToString(), out i))
            {
                return "int";
            }

            decimal d;
            if (decimal.TryParse(value.ToString(), out d))
            {
                return "decimal";
            }

            bool b;
            if (bool.TryParse(value.ToString(), out b))
            {
                return "bool";
            }

            return "string";
        }
        public static string LowerFirst(string text)
        {
            return char.ToLower(text[0]) + text.Substring(1);
        }
#>